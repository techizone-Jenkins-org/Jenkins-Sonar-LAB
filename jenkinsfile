pipeline {
    agent any // Or specify a label: agent { label 'your-build-node' }

    tools {
        // Configure your Maven installation name in Jenkins (Manage Jenkins -> Tools)
        maven 'Maven 3.8.6' // Replace with the name you configured, e.g., 'M3', 'Maven_Home'
    }

    environment {
        // --- SonarQube Project Configuration ---
        // This is the unique key for your project in SonarQube.
        // It's good practice to make this dynamic if you have many projects,
        // e.g., SONAR_PROJECT_KEY = "your-org:${env.JOB_NAME}"
        SONAR_PROJECT_KEY = 'your_project_key_here' // e.g., 'my-java-app'
        SONAR_PROJECT_NAME = 'Your Project Name' // e.g., 'My Java Application'
        SONAR_PROJECT_VERSION = '1.0' // Can be dynamic, e.g., env.BUILD_NUMBER

        // --- Optional: Custom SonarQube Server details if not using 'withSonarQubeEnv' ---
        // If you want to explicitly define the server URL (less common if configured globally)
        // SONAR_SERVER_URL = 'http://your-sonarqube-server:9000'
        // SONAR_LOGIN_TOKEN_ID = 'your-sonarqube-token-credential-id' // ID of a Secret Text credential in Jenkins
    }

    stages {
        stage('Checkout') {
            steps {
                // Replace with your SCM details (e.g., Git)
                git branch: 'main', url: 'https://github.com/your-org/your-repo.git'
                // If your Jenkinsfile is in SCM, you might not need this explicit step
                // depending on your job configuration (e.g., Pipeline script from SCM)
            }
        }

        stage('Build with Maven') {
            steps {
                // Ensure Maven builds correctly before SonarQube analysis
                sh 'mvn clean install -DskipTests' // Skip tests here if SonarQube will run them
            }
        }

        stage('SonarQube Analysis') {
            steps {
                // The 'withSonarQubeEnv' wrapper injects the server URL and token securely
                // 'SonarQubeServer' should match the name configured in Jenkins (Manage Jenkins -> Configure System -> SonarQube servers)
                withSonarQubeEnv('SonarQubeServer') { // Replace 'SonarQubeServer' with your configured server name
                    // Run SonarQube analysis using Maven
                    // -Dsonar.projectKey, -Dsonar.projectName, -Dsonar.projectVersion
                    // are typically passed if not picked up from pom.xml or environment.
                    // -Dsonar.host.url and -Dsonar.login are handled by withSonarQubeEnv.
                    sh "mvn org.sonarsource.scanner.maven:sonar-maven-plugin:sonar " +
                       "-Dsonar.projectKey=${SONAR_PROJECT_KEY} " +
                       "-Dsonar.projectName=\"${SONAR_PROJECT_NAME}\" " +
                       "-Dsonar.projectVersion=${SONAR_PROJECT_VERSION}"
                       // Add other properties as needed, e.g., -Dsonar.sources=src/main/java
                }
            }
        }

        stage('Quality Gate Check') {
            steps {
                // Wait for the Quality Gate status from SonarQube.
                // This step will make the pipeline wait until SonarQube has analyzed the code
                // and reported the Quality Gate status (pass/fail).
                // If the Quality Gate fails, the pipeline will typically fail as well.
                // 'SonarQubeServer' must match the name configured in Jenkins.
                waitForQualityGate abortPipeline: true, buildStability: true, credentialsId: 'your-sonarqube-token-credential-id'
                // Replace 'your-sonarqube-token-credential-id' with the ID of the Secret Text credential
                // that holds the SonarQube token for the Jenkins server connection.
                // This credential should be the same one used when configuring the SonarQube server in Jenkins.
            }
        }
    }

    post {
        always {
            // Optional: Archive any build artifacts
            archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
        }
        success {
            echo 'Pipeline finished successfully!'
        }
        failure {
            echo 'Pipeline failed. Check build logs and SonarQube dashboard for details.'
        }
    }
}
